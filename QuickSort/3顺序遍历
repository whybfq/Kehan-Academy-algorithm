顺序遍历用一次遍历完成对数据的分段

int partition(int a[], int start, int end) {  //分段
    int pivot = a[end];
    int storeIndex = start;
    for (int i = start; i < end; ++i) {
        if(a[i] < pivot) {
            std::swap(a[storeIndex], a[i]);
            ++storeIndex;
        }
    }
    std::swap(a[storeIndex],a[end]);
    return storeIndex;
}

void qs(int a[], int start, int end) {  //递归
    if (start >= end) return;
    int mid = partition(a, start, end);
    qs(a, start, mid - 1);
    qs(a, mid + 1, end);
}
