Challenge: Implement partition

var partition = function(array, p, r) {
    var q=p; 
    // Compare array[j] with array[r], for j = p, p+1,...r-1
    for(var j=p+1; j < r ; ++j){
    // If array[j] > array[r], just increment j.
    // If array[j] <= array[r], swap array[j] with array[q],
    //   increment q, and increment j. 
        if(array[j] <= array[r]){
            swap(array,j,q);
            ++q;
        } 
    }
    // maintaining that:
    //  array[p..q-1] are values known to be <= to array[r]
    //  array[q..j-1] are values known to be > array[r]
    //  array[j..r-1] haven't been compared with array[r]
    swap(array,q,r);
    // Once all elements in array[p..r-1]
    //  have been compared with array[r],
    //  swap array[r] with array[q], and return q.
    return q;
};

var quickSort = function(array, p, r) {
    if(p<r){
        var q=partition(array,p,r);
        quickSort(array,p ,q-1 );
        quickSort(array,q+1,r);
    }
};

var array = [9, 7, 5, 11, 12, 2, 14, 3, 10, 4, 6];
var q = partition(array, 0, array.length-1);
println("Array after partitioning: " + array);
Program.assertEqual(q, 4);
Program.assertEqual(array, [5, 2, 3, 4, 6, 7, 14, 9, 10, 11, 12]);

var array = [9, 7, 5, 11, 12, 2, 14, 3, 10, 6];
quickSort(array, 0, array.length-1);
println("Array after sorting: " + array);
Program.assertEqual(array, [2,3,5,6,7,9,10,11,12,14]);


// Uing in the object-oriented approach
class Solution {
public:
    /**
     * @param n: an integer
     * @param nums: an array
     * @return : the nth prime number as description.
    */

    int quickSelect(std::vector<int>& nums, int start, int end, int k) {
        if(start >= end) return nums[k];
        int left = start, right = end;
        int pivot = nums[(start + end) / 2];
        while (left <= right) {
            while(left <= right && nums[left] < pivot) ++left;
            while(left <= right && nums[right] > pivot) --right;
            if(left <= right) {
                    std::swap(nums[left++], nums[right--]);
            }
        }
        if(k <= right) return quickSelect(nums, start, right, k);
        if(k >= left) return quickSelect(nums, left, end, k);
        return nums[k];
    }
    
    int kthLargestElement(int k, std::vector<int> sums) {
        if (sums.size() == 0 || k < 1 || k > sums.size()) return -1;
        return quickSelect(sums, 0, sums.size()-1, sums.size() - k);
    }
};
